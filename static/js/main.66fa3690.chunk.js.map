{"version":3,"sources":["SolarPunkPainting.jpg","getEthereum.js","App.js","reportWebVitals.js","index.js"],"names":["getEthereum","a","document","readyState","Promise","resolve","setTimeout","window","ethereum","App","useState","account","setOwnerAccount","setChainID","setNetwork","contractAddress","setContractAddress","contract","setContract","customerAddress","setCustomerAddress","donorAddress","setDonorAddress","agreementValue","setAgreementValue","weight1","setWeight1","weight2","setWeight2","weight3","setWeight3","connected","connect","web3","Web3","provider","providers","HttpProvider","request","method","accounts","eth","getChainId","chain","net","getNetworkType","acc","console","log","address","map","_contract","Contract","BrightLink","abi","methods","addNewCustomer","send","then","setBaseLine","UpdateOracleData","settleAgreement","className","style","backgroundImage","background","backgroundPosition","backgroundSize","backgroundRepeat","width","height","onClick","color","type","value","placeholder","onChange","e","target","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.66fa3690.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/SolarPunkPainting.f8d155ba.jpg\";","export const getEthereum = async () => {\n\n    // event listener is not reliable\n    while (document.readyState !== \"complete\") {\n        await new Promise(resolve => setTimeout(resolve, 50))\n    }\n\n    return window.ethereum\n\n}\n","import React, {useEffect, useState} from 'react';\nimport \"./App.css\";\nimport Web3 from 'web3'\nimport background from \"./SolarPunkPainting.jpg\";\nimport BrightLink from './artifacts/contracts/BrightLink.json';\nimport map from \"./artifacts/deployments/map.json\";\nimport {getEthereum} from \"./getEthereum\"\n\n// uses functional component syntax\nfunction App(){\n\n  const [account, setOwnerAccount] = useState()\n  const [chainID, setChainID] = useState()\n  const [network, setNetwork] = useState()\n  const [contractAddress, setContractAddress] = useState()\n  const [contract, setContract] = useState()\n  const[customerAddress, setCustomerAddress] = useState()\n  const[donorAddress, setDonorAddress] = useState()\n  const [agreementValue, setAgreementValue] = useState()\n  const[weight1, setWeight1] = useState()\n  const[weight2, setWeight2] = useState()\n  const[weight3, setWeight3] = useState()\n  const [connected, connect] = useState()\n\n  \n  // loadBlockChain detects metamask account\n  // and network ID \n  async function loadBlockChain(){\n\n    const ethereum = await getEthereum()\n    let web3\n\n    if (ethereum) {\n        web3 = new Web3(ethereum)\n    } else if (window.web3) {\n        web3 = window.web3\n    } else {\n        const provider = new Web3.providers.HttpProvider(\n            \"http://127.0.0.1:8545\"\n        );\n        web3 = new Web3(provider)\n    }\n\n    // // Try to enable accounts (connect metamask)\n    // const ethereum = await getEthereum()\n    const accounts = await ethereum.request({method:'eth_requestAccounts'})\n    const chain = await web3.eth.getChainId()\n    const net = await web3.eth.net.getNetworkType()\n\n    //const accounts = await web3.eth.getAccounts()\n    const acc = accounts[0]\n    console.log(\"web3: \" + web3)\n    console.log(\"accounts: \" + accounts)\n    console.log(\"connected account: \" + acc)\n\n    setNetwork(net)\n    setChainID(chain)\n    setOwnerAccount(acc)\n\n    var address = ''\n\n    if (chain =='1337'){\n      address = map[\"dev\"]['BrightLink'][0]\n    }\n    else if(chain == 42){\n      address = map[\"42\"]['BrightLink'][0]\n    }\n    else if(chain==3){\n      address = map[\"3\"]['BrightLink'][0]\n    }\n    else if(chain==4){\n       address = map[\"4\"]['BrightLink'][0]\n    }\n    else{\n      throw 'Please connect to a valid testnet'\n    }\n\n    setContractAddress(address)\n    const _contract = new web3.eth.Contract(BrightLink.abi, address, acc)\n\n    setContract(_contract)\n    console.log(\"address: \" + address)\n    console.log(\"contract:  \" + _contract)\n    console.log(\"chain: \" + chain)\n    console.log(\"contract successfully loaded\")\n    \n    setWeight1(100)\n    setWeight2(100)\n    setWeight3(100)\n    \n    if (account){\n      connect(true)\n    }\n  }\n\n\n\n  async function AddNewCustomer(){\n\n    console.log(\"INSIDE FUNC, account = \" + account)\n    await contract.methods.addNewCustomer(customerAddress,donorAddress,agreementValue)\n      .send({'from':account})\n        .then(console.log(\"successfully added new customer\"))\n    \n    console.log(customerAddress)\n    console.log(donorAddress)\n    console.log(agreementValue)\n    console.log(typeof(contract))\n\n  }\n\n  async function setBaseLine(){\n    await contract.methods.setBaseLine(customerAddress,weight1,weight2,weight3)\n      .send({'from':account})\n        .then(console.log(\"successfully set base line\"))\n  }\n\n  async function getNewData(){\n    await contract.methods.UpdateOracleData(customerAddress,weight1,weight2,weight3)\n      .send({'from':account})\n        .then(console.log(\"successfully set base line\"))\n  }\n\n  async function settleAgreement(){\n    await contract.methods.settleAgreement(customerAddress)\n    .send({'from':account})\n      .then(console.log(\"successfully set base line\"))\n\n  }\n  \n\n  return (\n  \n    <div \n    className=\"App\" \n    style={{ backgroundImage: 'url(' + background + ')',\n    backgroundPosition: 'center',\n    backgroundSize: 'cover',\n    backgroundRepeat: 'no-repeat',\n    width: '100vw',\n    height: '100vh',\n    }}>\n    \n    <h1>BrightLink </h1>\n\n    {<button onClick={loadBlockChain} > Connect Wallet</button>}\n    <li style={{ color: 'green'}}>\n        {connected? <p><b>loaded contract</b></p> : null}0x59df037c6297d05023f739e518aef1c8bc7e9898\n      </li>\n\n   <p>BrightLink is deployed at: {contractAddress}</p>\n   <p>Connected to: {account}</p>\n    <br></br>\n    <br></br>\n\n    <p><b>Set new agreement</b></p>\n    <p><i>(you can only have one active agreement at a time)</i></p>\n    <input \n      type=\"text\"\n      value={customerAddress}\n      placeholder=\"Set Customer Address\"\n      onChange={e => setCustomerAddress(e.target.value)} />\n\n    <input \n        type=\"text\"\n        value={donorAddress}\n        placeholder=\"Set Donor Address\"\n        onChange={e => setDonorAddress(e.target.value)} />\n\n    <input\n      type=\"text\"\n      value={agreementValue}\n      placeholder=\"Set Agreement Value\"\n      onChange={e => setAgreementValue(e.target.value)} />\n\n    {<button onClick={AddNewCustomer}>Start New Agreement</button>}\n    \n    <br></br>\n    <br></br>\n\n    <p><b>Change satellite weightings and query remote sensing data</b></p>\n    <p><i>(please send 0.6 LINK to the contract to fund these queries</i></p>\n    <input\n      type=\"text\"\n      value={weight1}\n      placeholder=\"Set weight for Sentinel (%)\"\n      onChange={e => setWeight1(e.target.value)} />\n\n    <input\n      type=\"text\"\n      value={weight2}\n      placeholder=\"Set weight for Landsat (%)\"\n      onChange={e => setWeight2(e.target.value)} />\n\n    <input\n      type=\"text\"\n      value={weight3}\n      placeholder=\"Set weight for MODIS (%)\"\n      onChange={e => setWeight3(e.target.value)} />\n\n\n    {<button onClick={setBaseLine}>Set Baseline</button>}\n    {<button onClick={getNewData}>Get Updated Data</button>}\n\n    <br></br>\n    <br></br>\n    {<button onClick={settleAgreement}>Request Payout</button>}\n    \n    </div>\n\n  );\n  }\n\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}